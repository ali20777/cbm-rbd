library(actuar) # provides dinvgamma(x, shape, scale) where shape = alpha and scale = beta
library(ReliabilityTheory)
library(ggplot2)
library(reshape2)
br <- graph.formula(s -- M -- C1:C2:C3:C4, P1:P2:P3:P4 -- t,
C1 -- P1, C2 -- P2, C3 -- P3, C4 -- P4, s -- H -- P3:P4)
br <- setCompTypes(br, list("M"=c("M"), "H"=c("H"), "C"=c("C1", "C2", "C3", "C4"), "P"=c("P1", "P2", "P3", "P4")))
brsysign <- computeSystemSurvivalSignature(br)
brsysign
length(brsysign)
ncols(brsysign)
dim(brsysign)
length(brsysign$Probability > 0)
length(brsysign$Probability)
brsysign$Probability
brsysign$Probability > 0
sum(brsysign$Probability > 0)
head(brsysign)
names(brsysign)
names(brsysign)[1]
library(actuar) # provides dinvgamma(x, shape, scale) where shape = alpha and scale = beta
library(ReliabilityTheory)
library(ggplot2)
library(reshape2)
class(br)
?igraph
br
tkplot(br)
head(br)
head(brsysign)
library(actuar) # provides dinvgamma(x, shape, scale) where shape = alpha and scale = beta
library(ReliabilityTheory)
library(ggplot2)
library(reshape2)
lambdatofailure <- function(lambda, beta = 2){
lambda^(1/beta) * gamma(1 + 1/beta)
}
failuretolambda <- function(ft, beta = 2){
(ft/gamma(1 + 1/beta))^beta
}
cdinvgamma <- function(x, n0, y0, ...)
dinvgamma(x, shape = n0+1, scale = n0*y0, ...)
cpinvgamma <- function(x, n0, y0, ...)
pinvgamma(x, shape = n0+1, scale = n0*y0, ...)
cpigforoptim <- function(ny, t, ...)
cpinvgamma(t, ny[1], ny[2], ...)
cpigfornoptim <- function(n, y, t, ...)
cpinvgamma(t, n, y, ...)
postpredC <- function(n0y0, beta, n, fts, tnow, t, l, prior = FALSE){
if (t < tnow)
stop("t must be larger than tnow")
if(!prior){
e <- length(fts)
if (n < e)
stop("too many elements in fts, there can be at most n failure times!")
} else {
e <- 0
}
if (l > n-e)
stop("l can be at most c=n-e")
nn <- n0y0[1] + e
if(!prior)
nnyn <- n0y0[1]*n0y0[2] + (n-e)*(tnow^beta) + sum(fts^beta)
else
nnyn <- n0y0[1]*n0y0[2]
j <- seq(0, n-e-l) # !!!
choose(n-e, l) * sum( (-1)^j * choose(n-e-l, j) * (nnyn/(nnyn + (l+j)*(t^beta - tnow^beta)))^(nn + 1) )
}
postpredCpmf <- function(n0y0, beta, n, fts, tnow, t, prior = FALSE){
l <- seq(0, n-length(fts))
res <- numeric(length(l))
for (i in l) res[i+1] <- postpredC(n0y0, beta, n, fts, tnow, t, i, prior = prior)
res <- array(res)
dimnames(res)[[1]] <- l
res
}
postpredCcmf <- function(n0y0, beta, n, fts, tnow, t, prior = FALSE){
pmf <- postpredCpmf(n0y0, beta, n, fts, tnow, t, prior = prior)
cmf <- cumsum(pmf)
cmf
}
Ccmfplot <- function(cmf, add = FALSE, ylim = c(0,1), xlab = "l", ylab = "F(C = l)",...){
if(add)
lines(as.numeric(names(cmf)), cmf, type="s", ...)
else
plot(as.numeric(names(cmf)), cmf, type="s", ylim = ylim, xlab = xlab, ylab = ylab, ...)
}
fourCornersCcmf <- function(luckobj, beta, n, fts, tnow, t, prior = FALSE){
n0 <- n0(luckobj)
y0 <- y0(luckobj)
tl <- postpredCcmf(n0y0 = c(n0[1], y0[2]), beta = beta, n = n, fts = fts, tnow = tnow, t = t, prior = prior)
tr <- postpredCcmf(n0y0 = c(n0[2], y0[2]), beta = beta, n = n, fts = fts, tnow = tnow, t = t, prior = prior)
bl <- postpredCcmf(n0y0 = c(n0[1], y0[1]), beta = beta, n = n, fts = fts, tnow = tnow, t = t, prior = prior)
br <- postpredCcmf(n0y0 = c(n0[2], y0[1]), beta = beta, n = n, fts = fts, tnow = tnow, t = t, prior = prior)
Ccmfplot(tl, main = bquote(paste("n0 = [",.(n0[1]),",",.(n0[2]),"], y0 = [",.(round(y0[1],2)),",",.(round(y0[2],2)),"]")))
Ccmfplot(tr, lty = 2, add = TRUE)
Ccmfplot(bl, col = 2, add = TRUE)
Ccmfplot(br, col = 2, lty = 2, add = TRUE)
fail <- toString(fts)
cens <- paste(toString(tnow),"+", sep="")
cens <- paste(rep(cens, n-length(fts)), collapse=",")
data <- paste(fail, cens, sep=",")
mtext(paste("n = ",toString(n),", data = (",data,"), t = ",toString(t), sep=""), side = 3, line = 0.5)
legend("topleft", legend=c("tl","tr","bl","br"), lty=c(1,2,1,2), col=c(1,1,2,2))
cat("  ", paste(names(tl), collapse = "      "), "\n")
cat("tl", paste(round(tl,4), collapse = " "), "\n")
cat("tr", paste(round(tr,4), collapse = " "), "\n")
cat("bl", paste(round(bl,4), collapse = " "), "\n")
cat("br", paste(round(br,4), collapse = " "), "\n")
}
brsysign
head(brsysign)
dim(brsysign)[2]
names(brsysign)
names(brsysign)[-(4+1)]
head(br)
summary(br)
names(br)
name(br)
br$name
br$compType
NULL <= 2
if(NULL <= 2) print("a")
if(any(c(0,1)) > 2) print("a")
if(any(c(0,3)) > 2) print("a")
if(any(c(0,3) > 2)) print("a")
if(any(c(0,1) > 2)) print("a")
